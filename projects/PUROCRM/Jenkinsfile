def scmVars

pipeline {
    environment {
        PROJECT_NAME = "purocoach-crm-frontend"
        SLACK_CHANNEL = "#jenkins-job-notification"

        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')

        IMAGE_REPO = "114018177393.dkr.ecr.us-east-2.amazonaws.com"
        HELM_REPO_NAME = "__crmcoach__purocoach-crm-frontend.git"
    }

    agent {
        kubernetes {
            yaml '''
                apiVersion: v1
                kind: Pod
                metadata:
                  name: jenkins-agent
                  namespace: jenkins
                spec:
                  containers:
                  - name: docker
                    image: public.ecr.aws/g3q8u4r4/docker-in-docker:latest
                    securityContext:
                      privileged: true
                    volumeMounts:
                      - name: docker-socket
                        mountPath: /var/run/docker-host.sock
                  volumes:
                    - name: docker-socket
                      hostPath:
                        path: /var/run/docker.sock
               '''
        }
    }

    stages {

        stage('Login-Related-Systems') {
            steps {
                container('docker') {
                    sh '''
                       export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                       export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                       
                       
                       aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${IMAGE_REPO}
                       '''
                }
            }
        }

        stage('Clone') {
            steps {
                container('docker') {
                    script {
                        scmVars = checkout([$class           : 'GitSCM',
                                            branches         : [[name: env.ref]],
                                            userRemoteConfigs: [[credentialsId: 'github_creds', url: 'https://github.com/johnnydorvilien/purocoach-crm-frontend.git']],
                        ])
                        echo "Branch: ${scmVars.GIT_BRANCH}"
                        echo "Commit ID: ${scmVars.GIT_COMMIT}"
                        echo "Commit Message: ${scmVars.GIT_COMMIT_MESSAGE}"
                        echo "Author: ${scmVars.GIT_AUTHOR_NAME}"
                        echo "Email: ${scmVars.GIT_AUTHOR_EMAIL}"
                        echo "Remote URL: ${scmVars.GIT_URL}"
                    }
                }


            }
        }

        stage('Build-Docker-Image') {
            steps {
                container('docker') {
                    sh '''
                            docker build -t ${PROJECT_NAME}-${env}:''' + scmVars.GIT_COMMIT + ''' .
                       '''
                }
            }
        }

        stage('Build-Tag') {
            steps {
                container('docker') {
                    sh '''
                    docker tag ${PROJECT_NAME}-${env}:''' + scmVars.GIT_COMMIT + ''' ${IMAGE_REPO}/${PROJECT_NAME}-${env}:''' + scmVars.GIT_COMMIT + '''
                    docker tag ${PROJECT_NAME}-${env}:''' + scmVars.GIT_COMMIT + ''' ${IMAGE_REPO}/${PROJECT_NAME}-${env}:latest
                    '''
                }
            }
        }

        stage('Push-Images-Docker-to-AWS-ECR') {
            steps {
                container('docker') {
                    sh '''
                    docker push ${IMAGE_REPO}/${PROJECT_NAME}-${env}:''' + scmVars.GIT_COMMIT + '''
                    docker push ${IMAGE_REPO}/${PROJECT_NAME}-${env}:latest
                    '''
                }
            }
        }

        stage('Update-Helm-Chart-Version') {
            steps {
                container('docker') {
                    script {
                        withCredentials([usernamePassword(credentialsId: 'helm_github_creds', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {

                            git url: 'https://github.com/bitdancingchina/__crmcoach__purocoach-crm-frontend.git', branch: '${ref}',
                                    credentialsId: 'github_creds'

                            sh '''
                                pwd && ls
                                currentAppVersion=$(cat Chart.yaml | grep appVersion | awk '{print \$2}' | tr -d '\r')
                                
                                newAppVersion=''' + scmVars.GIT_COMMIT + '''
                                
                                if [ "$currentAppVersion" != "$newAppVersion" ]; then
                                    echo "Updating appVersion in Chart.yaml"
                                    echo "new app version:" $newAppVersion
                                    sed "s/appVersion:.*/appVersion: $newAppVersion/" Chart.yaml > Chart.yaml.tmp
                                    mv Chart.yaml.tmp Chart.yaml
    
                                    cat Chart.yaml
                            
                                    git config --global --add safe.directory /home/jenkins/agent/workspace/purocoach-crm-frontend-dev
                                    
                                    git config --global user.email "kobe73er@gmail.com"
                                    git config --global user.name "pengfei"
                                                             
                                    git add . || true
                                    git commit -m 'Update appVersion in Chart.yaml'
                                    git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${GIT_USERNAME}/${HELM_REPO_NAME} HEAD:${env}
                                else
                                    echo "No changes to appVersion in Chart.yaml"
                                fi         
                                '''
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            container('docker') {
                sh 'docker logout'
            }
            slackSend(color: "good", channel: "${SLACK_CHANNEL}", message: "${currentBuild.result}: Job '${currentBuild.projectName} [Build #${currentBuild.id}]' (${currentBuild.absoluteUrl}) ")
        }
    }
}