"use client";

import React, {
  FC,
  MutableRefObject,
  useEffect,
  useRef,
  useState,
} from "react";
import styles from "./ClientRegistrationModal3.module.css";
import { Chip } from "@/components";
import Modal from "react-modal";
import { useDispatch } from "react-redux";
import { toast } from "react-toastify";
import generator from "generate-password-ts";
import { toggleScreen1 } from "@/redux/slices/twoFASlice";
import { signupUser } from "@/services/auth/auth";
import { getCoachingCategories } from "@/services/coaching-categories";

interface Props {
  setIsOpen: (value: boolean) => void;
  modalIsOpen: boolean;
  setSuccess: (value: boolean) => void;
  emailValue: string;
}

const ClientRegistrationModal3: FC<Props> = ({
  setIsOpen,
  modalIsOpen,
  emailValue,
  setSuccess,
}) => {
  const dispatch = useDispatch();

  function closeModal() {
    setIsOpen(false);
  }

  const [selectedOptions, setSelectedOptions] = useState<any[]>([]);
  const [allOptions, setAllOptions] = useState<any[]>([]);
  const [openCoachingOptions, setOpenCoachingOptions] = useState(false);

  const [agreementChecked, setAgreementChecked] = useState(false);

  const [togglePassword, setTogglePassword] = useState(false);

  //handles the state of the error
  const [nameError, setNameError] = useState(false);
  const [passwordError, setPasswordError] = useState(false);
  const [confirmPasswordError, setConfirmPasswordError] = useState("");
  const [coachingOptionsError, setCoachingOptionsError] = useState(false);
  const [agreementError, setAgreementError] = useState(false);

  //handles the input value
  const [nameValue, setNameValue] = useState("");
  const [passwordValue, setPasswordValue] = useState("");
  const [confirmPasswordValue, setConfirmPasswordValue] = useState("");

  const nameRef = useRef(null) as MutableRefObject<HTMLInputElement | null>;

  const confirmPasswordRef = useRef(
    null
  ) as MutableRefObject<HTMLInputElement | null>;

  const [pwdStrength, setPwdStrength] = useState(0);
  const [firstTime, setFirstTime] = useState(true);
  const [autoGenerated, setAutoGenerated] = useState(false);

  useEffect(() => {
    const getCategories = async () => {
      try {
        const { data }: any = await getCoachingCategories();
        setAllOptions(data.data);
      } catch (error) {
        console.log(error);
      }
    };

    getCategories();
  }, []);

  //add coaching options to the selected options
  const addOption = (option: any) => {
    let isThere = selectedOptions.find((elem) => elem.id === option.id);

    if (isThere) {
      return;
    }

    if (selectedOptions.length === 3) {
      toast.warn(
        "Only 3 coaching categories are allowed. Please close the box and continue...",
        {
          autoClose: 7000,
        }
      );
      return;
    }

    setCoachingOptionsError(false);
    setSelectedOptions((curr) => {
      return [...curr, option];
    });

    if (allOptions.length === 1) {
      setOpenCoachingOptions(false);
    }

    setAllOptions((curr) => {
      return curr.filter((elem) => elem.id !== option.id);
    });
  };

  //remove coaching options from the selected options
  const removeOption = (option: any) => {
    setSelectedOptions((options) => {
      return options.filter((item) => item.id !== option.id);
    });

    setAllOptions((options) => {
      return [...options, option];
    });

    setOpenCoachingOptions(true);
  };

  //validates the form before submitting it to the backend
  const submitRegistration = async () => {
    setNameError(false);
    setCoachingOptionsError(false);
    setConfirmPasswordError("");
    setPasswordError(false);

    checkName();

    if (!passwordValue) {
      setPasswordError(true);
    }

    if (!confirmPasswordRef?.current?.value) {
      setConfirmPasswordError("Confirm password is required");
    }

    if (selectedOptions.length === 0) {
      setCoachingOptionsError(true);
    }

    if (passwordValue !== confirmPasswordRef?.current?.value) {
      toast.error("Confirm Password doesn't match");
      setConfirmPasswordError("Confirm Password doesn't match");
      return;
    }

    if (!agreementChecked) {
      setAgreementError(true);
      toast.error("Please fill in all the required fields");
      return;
    }
    const mailFormat =
      /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;

    if (!emailValue.match(mailFormat)) {
      toast.error("Please enter a proper email");
      return;
    }
    //calls the signupuser service to register the client
    try {
      const { data }: any = await signupUser({
        emailAddress: emailValue,
        password: passwordValue,
        userType: "CLIENT",
        provider: "NONE",
        client: {
          name: nameRef?.current?.value,
          coachingEnquiry: selectedOptions.map((option) => option.id),
        },
        serviceAgreementAgreed: true,
        receiveMarketingEmails: true,
      });
      if (data.responseCode === 201) {
        setSuccess(true);
      }
      setIsOpen(false);
      dispatch(toggleScreen1(true));
    } catch (error: any) {
      toast.error(
        error?.response.data.data.message || error?.response.data.message
      );
    }
  };

  //check whether it's a full name
  const checkName = () => {
    if (!nameRef?.current?.value) {
      setNameError(true);
    } else if (nameRef?.current?.value) {
      let name = nameRef?.current?.value.split(" ");
      if (name.length <= 1) {
        setNameError(true);
      } else if (name[1].length <= 2) {
        setNameError(true);
      }
    }
  };

  //autocapitalize the name
  const capitalize = (value: string | any): string => {
    let result = "";
    if (value) {
      let names = value.split(" ");
      for (let index = 0; index < names.length; index++) {
        if (names[index]) {
          names[index] = names[index][0].toUpperCase() + names[index].substr(1);
        }
      }
      result = names.join(" ");
    }
    return result;
  };

  //checks for name in keystroeks
  const checkForm = () => {
    checkName();
  };

  //autogenerates password
  const generatePassword = () => {
    let pwd = generator.generate({
      length: 12,
      numbers: true,
      symbols: true,
      lowercase: true,
      uppercase: true,
    });
    setPasswordValue(pwd);
    setConfirmPasswordValue(pwd);
    setTogglePassword(true);
    setAutoGenerated(true);
    navigator.clipboard.writeText(pwd);
  };

  //validates the password
  const passwordChecker = (value: string) => {
    //Minimum eight and maximum 10 characters, at least one uppercase letter, one lowercase letter, one number and one special character
    const passwordFormat =
      /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,20}$/;

    let totalStrength = 0;

    if (passwordValue) {
      if (value.length >= 8 && value.length <= 20) {
        totalStrength += 50;
      }
      if (value.match(passwordFormat)) {
        totalStrength += 50;
      }
      setPwdStrength(totalStrength);
    } else {
      setPwdStrength(0);
    }
  };

  return (
    <Modal isOpen={modalIsOpen} className={styles.modal} ariaHideApp={false}>
      <div className={styles.container}>
        <div className={styles.left__logo}>
          <img
            src="https://purocoach-crm-assets.s3.amazonaws.com/icons/logo.png"
            alt=""
          />
        </div>
        <p className={styles.info}>Client Registration</p>

        <div className={styles.email}>
          <p>Your email is</p>
          <h4>{emailValue}</h4>
        </div>

        <input
          type="text"
          placeholder="Name"
          className={styles.input}
          ref={nameRef}
          value={nameValue}
          onChange={(e) => {
            setNameValue(capitalize(e.target.value));
            if (e.target.value) {
              setNameError(false);
              setFirstTime(false);
            }
          }}
          onFocus={() => {
            checkForm();
          }}
        />

        {nameError && !firstTime && (
          <p className={styles.error}>Full name is required</p>
        )}

        <div
          className={styles.dropdown}
          onClick={() => setOpenCoachingOptions((curr) => !curr)}
          onFocus={() => {
            checkForm();
          }}
        >
          {selectedOptions.length === 0 ? (
            <p>Coaching Enquiry</p>
          ) : (
            <div className={styles.selectedOptions}>
              {selectedOptions.map((option, index) => {
                return (
                  <Chip
                    key={index}
                    option={option}
                    addOption={addOption}
                    selected
                    removeOption={removeOption}
                  />
                );
              })}
            </div>
          )}
          <img
            src={
              openCoachingOptions
                ? "https://purocoach-crm-assets.s3.amazonaws.com/client-registration/up-arrow-gray.png"
                : "https://purocoach-crm-assets.s3.amazonaws.com/icons/arrow-down.png"
            }
            alt=""
            className={openCoachingOptions ? styles.upArrow : styles.downArrow}
          />
        </div>
        {coachingOptionsError && (
          <p className={styles.error}>Coaching Enquiry is required</p>
        )}

        {openCoachingOptions && allOptions.length > 0 && (
          <div className={styles.dropdownOptions}>
            {allOptions.map((option, index) => {
              return (
                <Chip
                  key={index}
                  option={option}
                  addOption={addOption}
                  selected={false}
                  removeOption={function (value: string): void {
                    throw new Error("Function not implemented.");
                  }}
                />
              );
            })}
            <div
              className={styles.exitIcon}
              onClick={() => setOpenCoachingOptions(false)}
            >
              <img
                src="https://purocoach-crm-assets.s3.amazonaws.com/client-registration/exit-box.png"
                alt=""
              />
            </div>
          </div>
        )}

        <div className={styles.inputContainer}>
          <input
            type={togglePassword ? "text" : "password"}
            placeholder="Password"
            value={passwordValue}
            onChange={(e) => {
              setPasswordValue(e.target.value);
              passwordChecker(e.target.value);
              if (e.target.value) {
                setPasswordError(false);
              }
            }}
            maxLength={20}
            onFocus={() => {
              checkForm();
            }}
          />

          {togglePassword ? (
            <img
              src="https://purocoach-crm-assets.s3.amazonaws.com/icons/hide-password.png"
              alt=""
              onClick={() => setTogglePassword(false)}
            />
          ) : (
            <img
              src="https://purocoach-crm-assets.s3.amazonaws.com/icons/view-password.png"
              alt=""
              onClick={() => setTogglePassword(true)}
            />
          )}
        </div>

        {passwordError && <p className={styles.error}>Password is required</p>}

        <div className={styles.autoGenerate}>
          <button onClick={() => generatePassword()}>
            {autoGenerated ? "Re" : "Auto"}-generate password
          </button>
          {autoGenerated && (
            <div>
              <p>Copy</p>
              <img
                src="https://purocoach-crm-assets.s3.amazonaws.com/icons/copy.png"
                alt=""
              />
            </div>
          )}
        </div>

        <div className={styles.passwordChecker}>
          <p>Password must:</p>
          <div className={styles.passwordChecker__item}>
            <div
              className={`${
                pwdStrength < 50
                  ? styles.passwordCheckerCircle
                  : styles.passwordCheckerCircle__passed
              }`}
            ></div>
            <p>Be between 8 to 20 characters</p>
          </div>
          <div className={styles.passwordChecker__item}>
            <div
              className={`${
                pwdStrength > 50
                  ? styles.passwordCheckerCircle__passed
                  : styles.passwordCheckerCircle
              }`}
            ></div>
            <p>Include atleast</p>
          </div>
          <ul>
            <li>An uppercase letter</li>
            <li>A lowercase letter </li>
            <li>A number between 0 - 9</li>
            <li>A special character</li>
          </ul>
        </div>

        <div className={styles.inputContainer}>
          <input
            type={togglePassword ? "text" : "password"}
            placeholder="Confirm Password"
            ref={confirmPasswordRef}
            value={confirmPasswordValue}
            onChange={(e) => {
              setConfirmPasswordValue(e.target.value);
              if (e.target.value) {
                setConfirmPasswordError("");
              }
            }}
            maxLength={20}
            onFocus={() => {
              checkForm();
            }}
          />
          {togglePassword ? (
            <img
              src="https://purocoach-crm-assets.s3.amazonaws.com/icons/hide-password.png"
              alt=""
              onClick={() => setTogglePassword(false)}
            />
          ) : (
            <img
              src="https://purocoach-crm-assets.s3.amazonaws.com/icons/view-password.png"
              alt=""
              onClick={() => setTogglePassword(true)}
            />
          )}
        </div>
        {confirmPasswordError && (
          <p className={styles.error}>{confirmPasswordError}</p>
        )}
        <div className={styles.agreement}>
          <input
            type="checkbox"
            onChange={(e) => {
              setAgreementChecked(e.target.checked);
              console.log(e.target.checked);

              if (e.target.checked) {
                setAgreementError(false);
              }
            }}
          />
          <p>
            I agree to the <span>terms and conditions</span> and{" "}
            <span>privacy policy</span>
          </p>
        </div>
        {agreementError && (
          <p className={styles.agreementError}>
            Please accept our terms and agreements
          </p>
        )}
        <div className={styles.buttons}>
          <button className={styles.register} onClick={submitRegistration}>
            Submit Registration
          </button>
          <button className={styles.cancel} onClick={closeModal}>
            Cancel
          </button>
        </div>
      </div>
    </Modal>
  );
};

export default ClientRegistrationModal3;
