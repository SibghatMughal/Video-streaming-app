"use client";

import React, {
  FC,
  MutableRefObject,
  useEffect,
  useRef,
  useState,
} from "react";
import Modal from "react-modal";
import styles from "./CoachSignupModal4.module.css";
import { Stepper } from "@/components";
import {
  toggleOpenCoachSignup2,
  toggleOpenCoachSignup3,
  toggleOpenCoachSignup4,
} from "@/redux/slices/coachSignupSlice";
import { useDispatch } from "react-redux";
import { signupUser } from "@/services/auth/auth";
import { toast } from "react-toastify";
import generator from "generate-password-ts";

interface Props {
  setIsOpen: (value: boolean) => void;
  modalIsOpen: boolean;
  setSuccess: (value: boolean) => void;
  setLoading: (value: boolean) => void;
  setLoaderMsg: (value: string) => void;
}

const CoachSignupModal4: FC<Props> = ({
  setIsOpen,
  modalIsOpen,
  setSuccess,
  setLoaderMsg,
  setLoading,
}) => {
  const dispatch = useDispatch();
  let signUpObj: any;
  if (typeof window !== "undefined") {
    // Perform localStorage action
    signUpObj = localStorage.getItem("coach_signup");
  }
  useEffect(() => {
    // Perform localStorage action
    signUpObj = localStorage.getItem("coach_signup");
  }, []);
  function closeModal() {
    setIsOpen(false);
  }

  function proceedLogin() {
    setIsOpen(false);
  }

  const goBack = () => {
    dispatch(toggleOpenCoachSignup3(true));
  };

  const continueNow = async () => {
    setFnameError(false);
    setLnameError(false);
    setPasswordError(false);
    setPhoneNumberError(false);

    if (firstName === "") {
      setFnameError(true);
      return;
    }

    if (lastName === "") {
      setLnameError(true);
      return;
    }

    if (passwordValue === "") {
      setPasswordError(true);
      return;
    }

    if (phoneNumber === "") {
      setPhoneNumberError(true);
      return;
    }

    try {
      // setLoading(true);
      // setLoaderMsg("Please wait while we sign you up...");
      if (signUpObj) {
        const parsedObj: any = JSON.parse(signUpObj);
        const { data }: any = await signupUser({
          ...(parsedObj.emailAddress && {
            emailAddress: parsedObj.emailAddress,
          }),
          userType: "COACH",
          password: passwordValue,
          provider: "NONE",
          coach: {
            firstName,
            lastName,
            contactNo: phoneNumber,
            ...(parsedObj.coachCategory && {
              coachingCategory: parsedObj.coachCategory,
            }),
            ...(parsedObj.countryId && { countryId: parsedObj.countryId }),
            ...(parsedObj.website && { website: parsedObj.website }),
            ...(parsedObj.companyName && {
              companyName: parsedObj.companyName,
            }),
          },
          serviceAgreementAgreed: true,
          receiveMarketingEmails: true,
        });
        if (data.responseCode === 201) {
          toast.success("User registered successfully as Coach");
          // setLoading(false);
          setSuccess(true);
        }
      }
    } catch (error: any) {
      // setLoading(false);
      toast.error(
        error.response.data.message || error.response.data.data.message
      );
    }
  };

  const [phoneNumber, setPhoneNumber] = useState("");
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [passwordValue, setPasswordValue] = useState("");
  const [confirmPasswordValue, setConfirmPasswordValue] = useState("");
  const [togglePassword, setTogglePassword] = useState(false);

  const confirmPasswordRef = useRef(
    null
  ) as MutableRefObject<HTMLInputElement | null>;

  const [pwdStrength, setPwdStrength] = useState(0);
  const [firstTime, setFirstTime] = useState(true);
  const [autoGenerated, setAutoGenerated] = useState(false);

  const [fNameError, setFnameError] = useState(false);
  const [lNameError, setLnameError] = useState(false);
  const [passwordError, setPasswordError] = useState(false);
  const [phoneNumberError, setPhoneNumberError] = useState(false);
  const [agreementError, setAgreementError] = useState(false);

  //format phone number
  const phoneFormat = (value: string, key: string) => {
    if (key === "Backspace") {
      return setPhoneNumber((curr) => curr.slice(0, curr.length - 1));
    }
    let input = value.replace(/\D/g, "");

    input = input.substring(0, 10);

    let size = input.length;
    let result = "";
    if (size == 0) {
      result = input;
    } else if (size == 3) {
      result = "(" + input + ")-";
    } else if (size < 3) {
      result = "(" + input;
    } else if (size < 6) {
      result = "(" + input.substring(0, 3) + ")-" + input.substring(3, 6);
    } else if (size == 6) {
      result = "(" + input.substring(0, 3) + ")-" + input.substring(3, 6) + "-";
    } else {
      result =
        "(" +
        input.substring(0, 3) +
        ")-" +
        input.substring(3, 6) +
        "-" +
        input.substring(6, 10);
    }
    setPhoneNumber(result);
  };

  //autogenerates password
  const generatePassword = () => {
    let pwd = generator.generate({
      length: 12,
      numbers: true,
      symbols: true,
      lowercase: true,
      uppercase: true,
    });
    setPasswordValue(pwd);
    setConfirmPasswordValue(pwd);
    setTogglePassword(true);
    setAutoGenerated(true);
    navigator.clipboard.writeText(pwd);
  };

  //validates the password
  const passwordChecker = (value: string) => {
    //Minimum eight and maximum 10 characters, at least one uppercase letter, one lowercase letter, one number and one special character
    const passwordFormat =
      /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,20}$/;

    let totalStrength = 0;

    if (passwordValue) {
      if (value.length >= 8 && value.length <= 20) {
        totalStrength += 50;
      }
      if (value.match(passwordFormat)) {
        totalStrength += 50;
      }
      setPwdStrength(totalStrength);
    } else {
      setPwdStrength(0);
    }
  };

  const checkForm = () => {
    firstName === "" ? setFnameError(true) : setFnameError(false);
    lastName === "" ? setLnameError(true) : setLnameError(false);
    passwordValue === "" ? setPasswordError(true) : setPasswordError(false);
    phoneNumber === "" ? setPhoneNumberError(true) : setPhoneNumberError(false);
  };

  return (
    <Modal
      isOpen={modalIsOpen}
      // onRequestClose={closeModal}
      className={styles.modal}
      ariaHideApp={false}
    >
      <div className={styles.container}>
        <div className={styles.left}>
          <div className={styles.leftHeader__left} onClick={proceedLogin}>
            <img
              src="https://purocoach-crm-assets.s3.amazonaws.com/create-account/back.png"
              alt=""
            />
            <h3>Back to Login</h3>
          </div>
          <div className={styles.left__logo}>
            <img
              src="https://purocoach-crm-assets.s3.amazonaws.com/logo2.png"
              alt=""
            />
          </div>
          <h1 className={styles.title}>Sign-up</h1>
          <h1 className={styles.title2}>
            Answer five more questions and we&apos;ll get you into your
            free-trial
          </h1>
          <Stepper activeStep={4} />
          <p className={styles.info}>
            Complete the form to start your free trial. Our team will be in
            touch to help you make the most of your trial.
          </p>

          <div className={styles.inputContainer}>
            <label>First name</label>
            <br />
            <input
              type="text"
              value={firstName}
              onChange={(e) => setFirstName(e.target.value)}
              onFocus={() => checkForm()}
            />
          </div>

          {fNameError && <p className={styles.error}>First name is required</p>}

          <div className={styles.inputContainer}>
            <label>Last name</label>
            <br />
            <input
              type="text"
              value={lastName}
              onChange={(e) => setLastName(e.target.value)}
              onFocus={() => checkForm()}
            />
          </div>

          {lNameError && <p className={styles.error}>Last name is required</p>}

          <div className={styles.inputContainer}>
            <label>Password</label>
            <br />
            <div className={styles.pwdContainer}>
              <br />
              <input
                type={togglePassword ? "text" : "password"}
                placeholder="Password"
                value={passwordValue}
                onChange={(e) => {
                  setPasswordValue(e.target.value);
                  passwordChecker(e.target.value);
                  if (e.target.value) {
                    setPasswordError(false);
                  }
                }}
                maxLength={20}
                onFocus={() => checkForm()}
              />

              {togglePassword ? (
                <img
                  src="https://purocoach-crm-assets.s3.amazonaws.com/icons/hide-password.png"
                  alt=""
                  onClick={() => setTogglePassword(false)}
                />
              ) : (
                <img
                  src="https://purocoach-crm-assets.s3.amazonaws.com/icons/view-password.png"
                  alt=""
                  onClick={() => setTogglePassword(true)}
                />
              )}
            </div>
          </div>

          {passwordError && (
            <p className={styles.error}>Password is required</p>
          )}

          <div className={styles.autoGenerate}>
            <button onClick={() => generatePassword()}>
              {autoGenerated ? "Re" : "Auto"}-generate password
            </button>
            {autoGenerated && (
              <div>
                <p>Copy</p>
                <img
                  src="https://purocoach-crm-assets.s3.amazonaws.com/icons/copy.png"
                  alt=""
                />
              </div>
            )}
          </div>

          <div className={styles.passwordChecker}>
            <p>Password must:</p>
            <div className={styles.passwordChecker__item}>
              <div
                className={`${
                  pwdStrength < 50
                    ? styles.passwordCheckerCircle
                    : styles.passwordCheckerCircle__passed
                }`}
              ></div>
              <p>Be between 8 to 20 characters</p>
            </div>
            <div className={styles.passwordChecker__item}>
              <div
                className={`${
                  pwdStrength > 50
                    ? styles.passwordCheckerCircle__passed
                    : styles.passwordCheckerCircle
                }`}
              ></div>
              <p>Include atleast</p>
            </div>
            <ul>
              <li>An uppercase letter</li>
              <li>A lowercase letter </li>
              <li>A number between 0 - 9</li>
              <li>A special character</li>
            </ul>
          </div>

          <div className={styles.inputContainer}>
            <label>Phone number</label>
            <br />
            <input
              type="text"
              onKeyDown={(e) => {
                phoneFormat(e.currentTarget.value + e.key, e.key);
              }}
              value={phoneNumber}
              onFocus={() => checkForm()}
            />
          </div>

          {phoneNumberError && (
            <p className={styles.error}>Phone number is required</p>
          )}

          <div className={styles.agreement}>
            <input
              type="checkbox"
              className={styles.agreementCheckbox}
              onFocus={() => checkForm()}
            />
            <p className={styles.agreement1}>
              I agree to the <span>Services Agreement</span>
            </p>
          </div>

          <p className={styles.registrationInfo}>
            By registering, you agree to the processing of your personal data by
            PuroCoach as described in the <span>Privacy Statement</span> .
          </p>

          <div className={styles.agreement}>
            <input type="checkbox" className={styles.agreementCheckbox} />
            <p className={styles.agreement2}>
              Yes, I would like to receive marketing communications regarding
              PuroCoach products, services, and events. I can unsubscribe at any
              time.
            </p>
          </div>

          <div className={styles.buttonLayout}>
            <button className={styles.backButton} onClick={goBack}>
              Back
            </button>
            <button className={styles.nextButton} onClick={continueNow}>
              Submit
            </button>
          </div>
        </div>
        <div className={styles.copyright}>
          <img
            src="https://purocoach-crm-assets.s3.amazonaws.com/icons/reserved-vector.png"
            alt=""
          />
          <p>2023 PUROCoach. All rights reserved</p>
        </div>
      </div>
    </Modal>
  );
};

export default CoachSignupModal4;
